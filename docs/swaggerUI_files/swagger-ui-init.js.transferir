
window.onload = function() {
  // Build a system
  var url = window.location.search.match(/url=([^&]+)/);
  if (url && url.length > 1) {
    url = decodeURIComponent(url[1]);
  } else {
    url = window.location.origin;
  }
  var options = {
  "swaggerDoc": {
    "openapi": "3.0.0",
    "info": {
      "title": "saveDforest API",
      "version": "1.0.0",
      "description": "\nAPI documentation for the **saveDforest (v1)** MEAN stack web-app. It'll likely suffer some changes as I review the Unity game's code; I'll make sure to keep it up to date. <br> \n###### *Note that this is an offline HTML page, so the endpoints can't be tested as they normally would in Swagger. To do so, please refer to the server's [app.js file documentation](https://ricardosantosfc.github.io/saveDforest/docs/savedforest_documentation.pdf#page=27).* \n\n**IRI_AES** endpoints are linked to the Unity game's **IriAesScene**;\n\n- **SAM** endpoints are linked to the Unity game's **SamScene**;\n\n- **Quiz** endpoints are linked to the Unity game's **QuizScene**. <br>\n\nDo note that despite self-report questionnaires (IRIs, AESs and SAMs) only being submitted during first playthroughs, their associated game scenes are still loaded in subsequent playthroughs,\nas they're still responsible for triggering the updating the users' SaveData. Simply put:\n<br>\n\nDuring **first playthroughs**: <br>\n- **IriAesScene** - Submit answers to IRI and AES questionnaires, and create/update SaveData, via **/iriAes**. <br> Loaded twice, before the first game scenario - where a SaveData is created, and after the last (scenario 10) - where SaveData is prepared for for a subsequent playthrough (setting maxScore, resetting score, resetting current scenario, setting 1st playthrough finished flag).\n\n- **SamScene** - Submit answers to SAM questionnaires, and update SaveData, via **/sam**. <br> Loaded after a scenario is completed, except the last (i.e, scenarios 1-9).\n<br>\n\nIn **subsequent playthroughs**: <br>\n- **IriAesScene** - Update SaveData, via **/updateScoreIriAes**. <br> The first scene (the pre-scenario one) is skipped. Only the post-scenario one (after scenario 10) is loaded, to prepare for another subsequent playthrough (updating maxScore, resetting score, resetting current scenario).\n\n- **SamScene** - Update SaveData, via **/updateScoreSam**. <br> Still loaded after a scenario is completed, except the last (1-9). \n<br>\n\n\n### Some useful links:\n- [saveDforest main repo](https://github.com/ricardosantosfc/saveDforest)\n- [saveDforest backend server repo](https://github.com/ricardosantosfc/savedforest-backend-public)\n- [saveDforest documentation](https://ricardosantosfc.github.io/saveDforest/docs/savedforest_documentation.pdf)\n\n      "
    },
    "tags": [
      {
        "name": "User",
        "description": "Endpoints related to user authentication."
      },
      {
        "name": "IRI_AES",
        "description": "Endpoints related to the game`s IriAesScene."
      },
      {
        "name": "SAM",
        "description": "Endpoints related to the game`s SamScene."
      },
      {
        "name": "Quiz",
        "description": "Endpoints related to the game`s QuizScene."
      }
    ],
    "paths": {
      "/signup": {
        "post": {
          "tags": [
            "User"
          ],
          "description": "Creates a new User, and authenticates them, storing a session in the DB, and setting a session cookie in the client browser for subsequent authenticated requests.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignupRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Sign up successful. A session cookie is set in the client browser for subsequent authenticated requests.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request"
            },
            "403": {
              "description": "Operation failed, was still authenticated - destroys session from db and clears session cookie."
            },
            "422": {
              "description": "A user with the submitted email already exists"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/login": {
        "post": {
          "tags": [
            "User"
          ],
          "description": "Authenticates a User, storing a session in the DB, and setting a session cookie in the client browser for subsequent authenticated requests. <br> Responds with SaveData and the User's username.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Login successful. Responds with SaveData and the User's username. A session cookie is set in the client browser for subsequent authenticated requests. <br> Unity game will recieve response data and store it in IndexedDB.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request"
            },
            "401": {
              "description": "Invalid credentials"
            },
            "403": {
              "description": "Operation failed, was still authenticated  - destroys session from db and clears session cookie"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/logout": {
        "post": {
          "tags": [
            "User"
          ],
          "description": "Destroys User session from the db and clears client browser's session cookie.",
          "responses": {
            "200": {
              "description": "Successful logout. Client browser's session cookie is deleted. <br>  Unity game will receive response and clear IndexedDB.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Operation failed, no longer authenticated, session cookie expired or revoked. <br> Unity game will receive response and clear IndexedDB."
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/resetPwdRequest": {
        "post": {
          "tags": [
            "User"
          ],
          "description": "Generates a password reset token, and sends a password reset link via email, provided a User with the submitted email exists in the DB.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPwdRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "if email belongs to a user, reset password email has been sent",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "if email belongs to user, reset password has been sent"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/newPwdSubmit": {
        "post": {
          "tags": [
            "User"
          ],
          "description": "Changes User password.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPwdSubmitRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "password successfully changed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/iriAes": {
        "post": {
          "tags": [
            "IRI_AES"
          ],
          "description": "Stores new IRI and AES and creates/updates the user's SaveData during the first playthrough. <br>If scene = 0, a SaveData is created.<br> If scene = 10, SaveData's maxscore is set, score is reset, current scene is reset, and number flag for finished first playthrough is set.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IriAesRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "IRI and AES successfully stored, and SaveData created/updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request"
            },
            "403": {
              "description": "Operation failed, no longer authenticated, session cookie expired or revoked. <br> Unity game will receive response and clear IndexedDB."
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/updateScoreIriAes": {
        "post": {
          "tags": [
            "IRI_AES"
          ],
          "description": "Updates the user's SaveData in subsequent playthroughs. <br> This endpoint is only called at the end of the game - score is reset, current scene is reset and evaluates if this playthrough's final score > current maxScore, and send result to frontend.",
          "responses": {
            "200": {
              "description": "Successfully updated SaveData after finishing playthrough. Response includes new maxScore. <br> Unity game will recieve maxScore and update it in the IndexedDB.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateScoreIriAesResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Operation failed, no longer authenticated, session cookie expired or revoked. <br> Unity game will receive response and clear IndexedDB."
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/sam": {
        "post": {
          "tags": [
            "SAM"
          ],
          "description": "Stores new SAM and updates User's SaveData - currentScene and score - during the first playthrough.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SamRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Sam succesfully stored, and SaveData updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request"
            },
            "403": {
              "description": "Operation failed, no longer authenticated, session cookie expired or revoked. <br> Unity game will receive response and clear IndexedDB."
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/updateScoreSam": {
        "post": {
          "tags": [
            "SAM"
          ],
          "description": "Updates the user's SaveData - currentScene and score - in subsequent playthroughs.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateScoreSamRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successfully updated savedata",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Operation failed, no longer authenticated, session cookie expired or revoked. <br> Unity game will receive response and clear IndexedDB."
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/quiz": {
        "post": {
          "tags": [
            "Quiz"
          ],
          "description": "Updates the user's SaveData - score and badges - after completing a quiz. <br> A badge number flag is sent in the request;<br> Simply put, if req.badge == 0, then dont receive badge ; else, receive quiz badge",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successfully updated savedata",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request"
            },
            "403": {
              "description": "Operation failed, no longer authenticated, session cookie expired or revoked. <br> Unity game will receive response and clear IndexedDB."
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/quizSetFinalBadge": {
        "post": {
          "tags": [
            "Quiz"
          ],
          "description": "Updates the user's SaveData - score and badges - after winning the final special badge at the end of quiz 8; <br> After quiz 8, user set requirements for special badge (badge number 9, the final one). <br> But that doesn't mean that they won the quiz 8 badge - for this reason, a badge number flag is sent in the request. <br> Simply put, if req.badge == 1, then receive badge 8 and 9; else, receive badge 9",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizSetFinalBadgeRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successfully updated savedata",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request"
            },
            "403": {
              "description": "Operation failed, no longer authenticated, session cookie expired or revoked. <br> Unity game will receive response and clear IndexedDB."
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "SignupRequest": {
          "type": "object",
          "required": [
            "email",
            "password",
            "username",
            "age",
            "sex",
            "nationality",
            "education_level"
          ],
          "properties": {
            "email": {
              "type": "string",
              "format": "email"
            },
            "password": {
              "type": "string",
              "description": "User's plain text password (hashed by the server before being stored)",
              "example": "qwerty123"
            },
            "username": {
              "type": "string",
              "example": "son goku"
            },
            "age": {
              "type": "string",
              "example": 25
            },
            "sex": {
              "type": "string",
              "example": "Male"
            },
            "nationality": {
              "type": "string",
              "example": "Portuguese"
            },
            "education_level": {
              "type": "string",
              "example": "Postgraduate"
            },
            "education_background": {
              "type": "string",
              "example": "Technology"
            },
            "education_background_specified": {
              "type": "string",
              "example": ""
            }
          }
        },
        "LoginRequest": {
          "type": "object",
          "required": [
            "email",
            "password"
          ],
          "properties": {
            "email": {
              "type": "string",
              "format": "email"
            },
            "password": {
              "type": "string",
              "format": "password",
              "example": "qwerty123"
            }
          }
        },
        "LoginResponse": {
          "allOf": [
            {
              "$ref": "#/components/schemas/SuccessResponse"
            },
            {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "son goku"
                },
                "currentScene": {
                  "type": "number",
                  "description": "Current scenario number identifier",
                  "example": 4
                },
                "score": {
                  "type": "number",
                  "description": "User's current score",
                  "example": 24
                },
                "badges": {
                  "type": "string",
                  "description": "Badges earned by the user",
                  "example": "1, 4"
                },
                "finishedGame": {
                  "type": "number",
                  "description": "Number flag indicating if the player has finished 1st playthrough",
                  "example": 1
                },
                "maxScore": {
                  "type": "number",
                  "description": "Maximum score achieved by the user in previous playthroughs",
                  "example": 95
                }
              }
            }
          ]
        },
        "ResetPwdRequest": {
          "type": "object",
          "required": [
            "email"
          ],
          "properties": {
            "email": {
              "type": "string",
              "format": "email"
            }
          }
        },
        "NewPwdSubmitRequest": {
          "type": "object",
          "required": [
            "token",
            "password",
            "id"
          ],
          "properties": {
            "token": {
              "type": "string",
              "description": "Hashed token embedded into the link sent via email, to match with one in database",
              "example": "ihefwh3284y82330234ghf0"
            },
            "password": {
              "type": "string",
              "format": "password",
              "description": "The new password",
              "example": "qwerty456"
            },
            "id": {
              "type": "string",
              "description": "The user's ID, embedded into the link sent via email",
              "example": "60d0fe4f5311236168a109ca"
            }
          }
        },
        "IriAesRequest": {
          "type": "object",
          "properties": {
            "scene": {
              "type": "number",
              "description": "Numeric identifier for the game scenario these IRI and AES have been submitted; can be either 0 (submitted after signing up, before playing the 1st game scenario) or 10 (submitted after the 10th - and final - game scenario)",
              "example": 0
            },
            "scoreIRI": {
              "type": "number",
              "description": "Total IRI score",
              "example": 47
            },
            "scoreAES": {
              "type": "number",
              "description": "Total AES score",
              "example": 110
            },
            "questionsIRIjson": {
              "type": "string",
              "description": "Map in JSON string format containing each IRI question and score. keys are NOT ORDERED.",
              "example": "{\"question_6\":3.0,\"question_3\":3.0,\"question_4\":3.0}"
            },
            "questionsAESjson": {
              "type": "string",
              "description": "Map in JSON string format containing each AES question and score. keys are NOT ORDERED.",
              "example": "{\"question_6\":3.0,\"question_3\":3.0,\"question_4\":3.0}"
            }
          }
        },
        "UpdateScoreIriAesResponse": {
          "allOf": [
            {
              "$ref": "#/components/schemas/SuccessResponse"
            },
            {
              "type": "object",
              "properties": {
                "maxScore": {
                  "type": "number",
                  "description": "Max score achieved by the user in playthroughs",
                  "example": 95
                }
              }
            }
          ]
        },
        "SamRequest": {
          "type": "object",
          "required": [
            "scene",
            "arousal",
            "valence",
            "nextScene",
            "score"
          ],
          "properties": {
            "scene": {
              "type": "number",
              "description": "Numeric identifier for the game scenario this SAM has been submitted after. Range 1-9;",
              "example": 3
            },
            "arousal": {
              "type": "number",
              "description": "Arousal score;",
              "example": 5
            },
            "valence": {
              "type": "number",
              "description": "Valence score;",
              "example": 2
            },
            "nextScene": {
              "type": "number",
              "description": "ID for scenario that comes after this SAM game scene, which becomes currentScene in the SaveData",
              "example": 4
            },
            "score": {
              "type": "number",
              "description": "User's current score",
              "example": 24
            }
          }
        },
        "UpdateScoreSamRequest": {
          "type": "object",
          "required": [
            "nextScene",
            "score"
          ],
          "properties": {
            "nextScene": {
              "type": "number",
              "description": "Numeric identifier for scenario that comes after this SAM game scene, which becomes currentScene in the SaveData",
              "example": 4
            },
            "score": {
              "type": "number",
              "description": "User's current score",
              "example": 16
            }
          }
        },
        "QuizRequest": {
          "type": "object",
          "required": [
            "quiz",
            "score",
            "badge"
          ],
          "properties": {
            "quiz": {
              "type": "number",
              "description": "Numeric identifier for this quiz.",
              "example": 4
            },
            "score": {
              "type": "number",
              "description": "User's current score",
              "example": 16
            },
            "badge": {
              "type": "number",
              "description": "Number flag indicating if the player has obtained this quiz's badge (0 = no, 1 = yes).",
              "example": 1
            }
          }
        },
        "QuizSetFinalBadgeRequest": {
          "type": "object",
          "required": [
            "score",
            "badge"
          ],
          "properties": {
            "score": {
              "type": "number",
              "description": "User's current score",
              "example": 23
            },
            "badge": {
              "type": "number",
              "description": "Number flag indicating if the player has obtained quiz 8 badge (0 = no, 1 = yes).",
              "example": 1
            }
          }
        },
        "SuccessResponse": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "example": true
            },
            "message": {
              "type": "string",
              "example": "Operation successful"
            }
          }
        }
      }
    }
  },
  "customOptions": {
    "withCredentials": true,
    "supportedSubmitMethods": []
  }
};
  url = options.swaggerUrl || url
  var urls = options.swaggerUrls
  var customOptions = options.customOptions
  var spec1 = options.swaggerDoc
  var swaggerOptions = {
    spec: spec1,
    url: url,
    urls: urls,
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout"
  }
  for (var attrname in customOptions) {
    swaggerOptions[attrname] = customOptions[attrname];
  }
  var ui = SwaggerUIBundle(swaggerOptions)

  if (customOptions.oauth) {
    ui.initOAuth(customOptions.oauth)
  }

  if (customOptions.preauthorizeApiKey) {
    const key = customOptions.preauthorizeApiKey.authDefinitionKey;
    const value = customOptions.preauthorizeApiKey.apiKeyValue;
    if (!!key && !!value) {
      const pid = setInterval(() => {
        const authorized = ui.preauthorizeApiKey(key, value);
        if(!!authorized) clearInterval(pid);
      }, 500)

    }
  }

  if (customOptions.authAction) {
    ui.authActions.authorize(customOptions.authAction)
  }

  window.ui = ui
}
